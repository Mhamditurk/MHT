package Cözümler;

public class finiteDifference {

	public static void main(String[] args) {
		double a,b,alfa,beta;
	    double h,x;
	    double w[]= new double [101];
	    int n,i;
	    a=0;
		b=Math.PI/2;
		n=3;
		alfa=-0.3;
		beta=-0.1;
	    h=(b-a)/(n+1);
	    FiniteDifference(w,a,b,alfa,beta,h,n);
	    System.out.printf("xi\t\twi\t\tYi\t\t|wi-yi|");
	    System.out.printf("\n__________________________________________________________________________________\n");
	    for(i=1;i<=n;i++) {
          	x=a+i*h;
          	System.out.printf("\n%.2f",x);
          	System.out.printf("\t\t%.8f",w[i]);
  	      	System.out.printf("\t%.8f",Y(x));
  	      	System.out.printf("\t%E",Math.abs(w[i]-Y(x)));
          	System.out.printf("\n__________________________________________________________________________________\n");
       }
	}
	static double Y(double x)
	{
		return -1./10*(Math.sin(x)+3*Math.cos(x));
	}
	static double P(double x) {
		
		return 1;
	}
	static double Q(double x) {
		
		return 2;
	}
	static double R(double x) {
		
		return Math.cos(x);
	}
	static void FiniteDifference(double w[],double a,double b, double alfa, double beta, double h, int n)
	{
	     double x;
	     double A[]= new double [101];
	     double B[]= new double [101];
	     double C[]= new double [101];
	     double D[]= new double [101];
	     double U[]= new double [101];
	     double Z[]= new double [101];
	     double L[]= new double [101];
	     int i;
	     x=a+h;
	     A[1]=2+Math.pow(h,2)*Q(x);
	     B[1]=-1+h/2*P(x);
	     D[1]=-Math.pow(h,2)*R(x)+(1+h/2*P(x))*alfa;
	     
	     for(i=2;i<n;i++)
	     {
	     	x=a+i*h;
	     	A[i]=2+Math.pow(h,2)*Q(x);
	     	B[i]=-1+h/2*P(x);
	     	C[i]=-1-h/2*P(x);
	     	D[i]=-Math.pow(h,2)*R(x);
	     	
	     }
	     
	     x=b-h;
	     A[n]=2+Math.pow(h,2)*Q(x);
	    
	     C[n]=-1-h/2*P(x);
	     D[n]=-Math.pow(h,2)*R(x)+(1-h/2*P(x))*beta;
	     
	     L[1]=A[1];
		 U[1]=B[1]/A[1];
		 
		 for(i=2;i<n;i++)
		 {
		 	L[i]=A[i]-C[i]*U[i-1];
		  	U[i]=B[i]/L[i];
		 }
		 L[n]=A[n]-C[n]*U[n-1];
		 Z[1]=D[1]/L[1];
		 for(i=2;i<=n;i++) Z[i]=(D[i]-C[i]*Z[i-1])/L[i];
		 w[0]=alfa;
		 w[n+1]=beta;
		 w[n]=Z[n];
		 for(i=n-1;i>0;i--) 
		      w[i]=Z[i]-U[i]*w[i+1];
		return;
	}
}
